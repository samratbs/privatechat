@page "/"
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Private Chat</PageTitle>
<h3>Chat with Friends</h3>

@if (!isConnected)
{
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="what is your name?">
        <button class="btn btn-primary form-control-append" @onclick="ConnectToHub">Connect</button>
    </div>
}
else
{
    <textarea style="width:100%; height:500px;">@messages</textarea>
    <div class="input-group">
        <input @bind-value="message" @bind-value:event="oninput" @onkeyup="HandleInput" class="form-control">
        <button class="btn btn-primary form-group-append" @onclick="Send" disabled="@(!isConnected)">=></button>
    </div>
}


@code {
    private HubConnection? hubConnection;
    private string messages = string.Empty;
    private string username = string.Empty;
    private string message = string.Empty;

    private async Task ConnectToHub()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl("https://localhost:44335/chathub").WithAutomaticReconnect()
        .Build();

        //Listen for Event
        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")} {message}";
            messages += msg + "\n";
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("SendMessage", username, message);
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await Send();
        }
    }

    public bool isConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
