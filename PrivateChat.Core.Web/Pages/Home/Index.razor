@page "/"
@inject IHubProcessor _hubProcessor
@implements IAsyncDisposable
@layout HomeLayout

<PageTitle>Private Chat</PageTitle>
<h3>Chat with Friends</h3>

@if (!isConnected)
{
    <div class="input-group">
        <input @bind="chat.Username" class="form-control" placeholder="what is your name?">
        <button class="btn btn-primary form-control-append" @onclick="ConnectToHub">Connect</button>
    </div>
}
else
{   
    <div>
         @foreach (string message in chat.ChatMessages)
            {   
                <br/>
                @message;
            }
    </div>
   
    <div class="input-group">
        <input @bind-value="chat.Message" @bind-value:event="oninput" @onkeyup="HandleInput" class="form-control">
        <button class="btn btn-primary form-group-append" @onclick="Send" disabled="@(!isConnected)">=></button>
    </div>
}


@code {
    private HubConnection? hubConnection;
    private Chat chat = new() {ChatMessages = new()};

    private async Task ConnectToHub()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl("https://localhost:44335/chathub").WithAutomaticReconnect()
        .Build();

        //Listen for Event
        hubConnection.On<Chat>("ReceiveMessage", (chat) =>
        {
            string formattedMessage = $"{(string.IsNullOrEmpty(chat.Username) ? "" : chat.Username + ": ")} {chat.Message}";
            this.chat.ChatMessages.Add(formattedMessage);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        await _hubProcessor.SendMessageAsync(hubConnection, chat);
        chat.Message = "";
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await Send();
        }
    }

    public bool isConnected => _hubProcessor.IsConnected(hubConnection);

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
