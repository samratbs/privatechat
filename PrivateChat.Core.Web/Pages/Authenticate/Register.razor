@page "/register"
@using Microsoft.AspNetCore.WebUtilities;
@inject NavigationManager NavigationManager
@inject IUserService UserService
@layout AuthenticateLayout

<div class="card mx-auto">
    <h4 class="title-text">Register For PrivateChat</h4>
    <div class="card-body">
        <EditForm Model="@newUser" OnValidSubmit="OnValidSubmit">
            @if (usernameExists && statusCode != 200)
            {
                <MudAlert Severity="Severity.Error">@message</MudAlert>
            }
            <DataAnnotationsValidator />
            <div class="form-group p-3">
                <div class="label-format">
                    <label>Username</label>
                </div>
                <InputText @bind-Value="newUser.Username" class="form-control shadow-none" placeholder="Enter your Username"/>
                <ValidationMessage For="@(() => newUser.Username)" />
            </div>
            <div class="form-group p-3">
                <div class="label-format">
                    <label>Password</label>
                </div>
                <InputText @bind-Value="newUser.Password" type="password" class="form-control shadow-none" placeholder="Enter your Password" />
                <ValidationMessage For="@(() => newUser.Password)" />
            </div>
            <div class="p-2">
                <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Register
            </button>
            </div>
            <div class="form-group p-2">
                <NavLink href="login" class="btn btn-link">Already have an account?</NavLink>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private User newUser = new();
    private bool loading;
    private bool usernameExists;
    private int statusCode = 200;
    private string? message;

    private async void OnValidSubmit()
    {
        // reset alerts on submit
        loading = true;
        try
        {
            var response = await UserService.Register(newUser);
            usernameExists = response.Found;
            message = response.Message;
            statusCode = response.StatusCode;
            if (!usernameExists)
            {   
                loading = false;
                StateHasChanged();
                var queryStrDict = new Dictionary<string, string>
                    {
                        ["NewRegister"] = "Y",
                    };
                NavigationManager.NavigateTo(
                    QueryHelpers.AddQueryString("/login", queryStrDict)
                );   
            }
            loading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            loading = false;
            StateHasChanged();
        }
    }
}